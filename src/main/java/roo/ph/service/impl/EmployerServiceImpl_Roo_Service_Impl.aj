// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import roo.ph.domain.Contract;
import roo.ph.domain.Employer;
import roo.ph.repository.EmployerRepository;
import roo.ph.service.api.ContractService;
import roo.ph.service.impl.EmployerServiceImpl;

privileged aspect EmployerServiceImpl_Roo_Service_Impl {
    
    declare @type: EmployerServiceImpl: @Service;
    
    declare @type: EmployerServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private EmployerRepository EmployerServiceImpl.employerRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContractService EmployerServiceImpl.contractService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param employerRepository
     * @param contractService
     */
    @Autowired
    public EmployerServiceImpl.new(EmployerRepository employerRepository, @Lazy ContractService contractService) {
        setEmployerRepository(employerRepository);
        setContractService(contractService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return EmployerRepository
     */
    public EmployerRepository EmployerServiceImpl.getEmployerRepository() {
        return employerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employerRepository
     */
    public void EmployerServiceImpl.setEmployerRepository(EmployerRepository employerRepository) {
        this.employerRepository = employerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContractService
     */
    public ContractService EmployerServiceImpl.getContractService() {
        return contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contractService
     */
    public void EmployerServiceImpl.setContractService(ContractService contractService) {
        this.contractService = contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     * @return Map
     */
    public Map<String, List<MessageI18n>> EmployerServiceImpl.validate(Employer employer) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     * @param contractsToAdd
     * @return Employer
     */
    @Transactional
    public Employer EmployerServiceImpl.addToContracts(Employer employer, Iterable<Long> contractsToAdd) {
        List<Contract> contracts = getContractService().findAll(contractsToAdd);
        employer.addToContracts(contracts);
        return getEmployerRepository().save(employer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     * @param contractsToRemove
     * @return Employer
     */
    @Transactional
    public Employer EmployerServiceImpl.removeFromContracts(Employer employer, Iterable<Long> contractsToRemove) {
        List<Contract> contracts = getContractService().findAll(contractsToRemove);
        employer.removeFromContracts(contracts);
        return getEmployerRepository().save(employer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     * @param contracts
     * @return Employer
     */
    @Transactional
    public Employer EmployerServiceImpl.setContracts(Employer employer, Iterable<Long> contracts) {
        List<Contract> items = getContractService().findAll(contracts);
        Set<Contract> currents = employer.getContracts();
        Set<Contract> toRemove = new HashSet<Contract>();
        for (Iterator<Contract> iterator = currents.iterator(); iterator.hasNext();) {
            Contract nextContract = iterator.next();
            if (items.contains(nextContract)) {
                items.remove(nextContract);
            } else {
                toRemove.add(nextContract);
            }
        }
        employer.removeFromContracts(toRemove);
        employer.addToContracts(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        employer.setVersion(employer.getVersion() + 1);
        return getEmployerRepository().save(employer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     */
    @Transactional
    public void EmployerServiceImpl.delete(Employer employer) {
        // Clear bidirectional one-to-many parent relationship with Contract
        for (Contract item : employer.getContracts()) {
            item.setEmployer(null);
        }
        
        getEmployerRepository().delete(employer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Employer> EmployerServiceImpl.save(Iterable<Employer> entities) {
        return getEmployerRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void EmployerServiceImpl.delete(Iterable<Long> ids) {
        List<Employer> toDelete = getEmployerRepository().findAll(ids);
        getEmployerRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Employer
     */
    @Transactional
    public Employer EmployerServiceImpl.save(Employer entity) {
        return getEmployerRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Employer
     */
    public Employer EmployerServiceImpl.findOne(Long id) {
        return getEmployerRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Employer
     */
    public Employer EmployerServiceImpl.findOneForUpdate(Long id) {
        return getEmployerRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Employer> EmployerServiceImpl.findAll(Iterable<Long> ids) {
        return getEmployerRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Employer> EmployerServiceImpl.findAll() {
        return getEmployerRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long EmployerServiceImpl.count() {
        return getEmployerRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Employer> EmployerServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getEmployerRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Employer> EmployerServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getEmployerRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param name
     * @param pageable
     * @return Page
     */
    public Page<Employer> EmployerServiceImpl.findByName(String name, Pageable pageable) {
        return getEmployerRepository().findByName(name, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param name
     * @return Long
     */
    public long EmployerServiceImpl.countByName(String name) {
        return getEmployerRepository().countByName(name);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Employer> EmployerServiceImpl.getEntityType() {
        return Employer.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> EmployerServiceImpl.getIdType() {
        return Long.class;
    }
    
}
