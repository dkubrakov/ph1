// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import roo.ph.domain.Author;
import roo.ph.domain.Book;
import roo.ph.domain.Contract;
import roo.ph.repository.AuthorRepository;
import roo.ph.service.api.BookService;
import roo.ph.service.api.ContractService;
import roo.ph.service.impl.AuthorServiceImpl;

privileged aspect AuthorServiceImpl_Roo_Service_Impl {
    
    declare @type: AuthorServiceImpl: @Service;
    
    declare @type: AuthorServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private AuthorRepository AuthorServiceImpl.authorRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private BookService AuthorServiceImpl.bookService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContractService AuthorServiceImpl.contractService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param authorRepository
     * @param bookService
     * @param contractService
     */
    @Autowired
    public AuthorServiceImpl.new(AuthorRepository authorRepository, @Lazy BookService bookService, @Lazy ContractService contractService) {
        setAuthorRepository(authorRepository);
        setBookService(bookService);
        setContractService(contractService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return AuthorRepository
     */
    public AuthorRepository AuthorServiceImpl.getAuthorRepository() {
        return authorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param authorRepository
     */
    public void AuthorServiceImpl.setAuthorRepository(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return BookService
     */
    public BookService AuthorServiceImpl.getBookService() {
        return bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param bookService
     */
    public void AuthorServiceImpl.setBookService(BookService bookService) {
        this.bookService = bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContractService
     */
    public ContractService AuthorServiceImpl.getContractService() {
        return contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contractService
     */
    public void AuthorServiceImpl.setContractService(ContractService contractService) {
        this.contractService = contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @return Map
     */
    public Map<String, List<MessageI18n>> AuthorServiceImpl.validate(Author author) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param booksToAdd
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.addToBooks(Author author, Iterable<Long> booksToAdd) {
        List<Book> books = getBookService().findAll(booksToAdd);
        author.addToBooks(books);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contractsToAdd
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.addToContracts(Author author, Iterable<Long> contractsToAdd) {
        List<Contract> contracts = getContractService().findAll(contractsToAdd);
        author.addToContracts(contracts);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param booksToRemove
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.removeFromBooks(Author author, Iterable<Long> booksToRemove) {
        List<Book> books = getBookService().findAll(booksToRemove);
        author.removeFromBooks(books);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contractsToRemove
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.removeFromContracts(Author author, Iterable<Long> contractsToRemove) {
        List<Contract> contracts = getContractService().findAll(contractsToRemove);
        author.removeFromContracts(contracts);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param books
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.setBooks(Author author, Iterable<Long> books) {
        List<Book> items = getBookService().findAll(books);
        Set<Book> currents = author.getBooks();
        Set<Book> toRemove = new HashSet<Book>();
        for (Iterator<Book> iterator = currents.iterator(); iterator.hasNext();) {
            Book nextBook = iterator.next();
            if (items.contains(nextBook)) {
                items.remove(nextBook);
            } else {
                toRemove.add(nextBook);
            }
        }
        author.removeFromBooks(toRemove);
        author.addToBooks(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        author.setVersion(author.getVersion() + 1);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contracts
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.setContracts(Author author, Iterable<Long> contracts) {
        List<Contract> items = getContractService().findAll(contracts);
        Set<Contract> currents = author.getContracts();
        Set<Contract> toRemove = new HashSet<Contract>();
        for (Iterator<Contract> iterator = currents.iterator(); iterator.hasNext();) {
            Contract nextContract = iterator.next();
            if (items.contains(nextContract)) {
                items.remove(nextContract);
            } else {
                toRemove.add(nextContract);
            }
        }
        author.removeFromContracts(toRemove);
        author.addToContracts(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        author.setVersion(author.getVersion() + 1);
        return getAuthorRepository().save(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     */
    @Transactional
    public void AuthorServiceImpl.delete(Author author) {
        // Clear bidirectional one-to-many parent relationship with Book
        for (Book item : author.getBooks()) {
            item.setAuthor(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Contract
        for (Contract item : author.getContracts()) {
            item.setAuthor(null);
        }
        
        getAuthorRepository().delete(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Author> AuthorServiceImpl.save(Iterable<Author> entities) {
        return getAuthorRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void AuthorServiceImpl.delete(Iterable<Long> ids) {
        List<Author> toDelete = getAuthorRepository().findAll(ids);
        getAuthorRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Author
     */
    @Transactional
    public Author AuthorServiceImpl.save(Author entity) {
        return getAuthorRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Author
     */
    public Author AuthorServiceImpl.findOne(Long id) {
        return getAuthorRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Author
     */
    public Author AuthorServiceImpl.findOneForUpdate(Long id) {
        return getAuthorRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Author> AuthorServiceImpl.findAll(Iterable<Long> ids) {
        return getAuthorRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Author> AuthorServiceImpl.findAll() {
        return getAuthorRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long AuthorServiceImpl.count() {
        return getAuthorRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Author> AuthorServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getAuthorRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Author> AuthorServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getAuthorRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param name
     * @param pageable
     * @return Page
     */
    public Page<Author> AuthorServiceImpl.findByName(String name, Pageable pageable) {
        return getAuthorRepository().findByName(name, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param name
     * @return Long
     */
    public long AuthorServiceImpl.countByName(String name) {
        return getAuthorRepository().countByName(name);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Author> AuthorServiceImpl.getEntityType() {
        return Author.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> AuthorServiceImpl.getIdType() {
        return Long.class;
    }
    
}
