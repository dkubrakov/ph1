// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import roo.ph.domain.Book;
import roo.ph.domain.Customer;
import roo.ph.domain.OrderBook;
import roo.ph.repository.OrderBookRepository;
import roo.ph.service.api.BookService;
import roo.ph.service.api.CustomerService;
import roo.ph.service.impl.OrderBookServiceImpl;

privileged aspect OrderBookServiceImpl_Roo_Service_Impl {
    
    declare @type: OrderBookServiceImpl: @Service;
    
    declare @type: OrderBookServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private OrderBookRepository OrderBookServiceImpl.orderBookRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private BookService OrderBookServiceImpl.bookService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerService OrderBookServiceImpl.customerService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param orderBookRepository
     * @param bookService
     * @param customerService
     */
    @Autowired
    public OrderBookServiceImpl.new(OrderBookRepository orderBookRepository, @Lazy BookService bookService, @Lazy CustomerService customerService) {
        setOrderBookRepository(orderBookRepository);
        setBookService(bookService);
        setCustomerService(customerService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return OrderBookRepository
     */
    public OrderBookRepository OrderBookServiceImpl.getOrderBookRepository() {
        return orderBookRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBookRepository
     */
    public void OrderBookServiceImpl.setOrderBookRepository(OrderBookRepository orderBookRepository) {
        this.orderBookRepository = orderBookRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return BookService
     */
    public BookService OrderBookServiceImpl.getBookService() {
        return bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param bookService
     */
    public void OrderBookServiceImpl.setBookService(BookService bookService) {
        this.bookService = bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerService
     */
    public CustomerService OrderBookServiceImpl.getCustomerService() {
        return customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerService
     */
    public void OrderBookServiceImpl.setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderbook
     * @return Map
     */
    public Map<String, List<MessageI18n>> OrderBookServiceImpl.validate(OrderBook orderbook) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param booksToAdd
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.addToBooks(OrderBook orderBook, Iterable<Long> booksToAdd) {
        List<Book> books = getBookService().findAll(booksToAdd);
        orderBook.addToBooks(books);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customersToAdd
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.addToCustomers(OrderBook orderBook, Iterable<Long> customersToAdd) {
        List<Customer> customers = getCustomerService().findAll(customersToAdd);
        orderBook.addToCustomers(customers);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param booksToRemove
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.removeFromBooks(OrderBook orderBook, Iterable<Long> booksToRemove) {
        List<Book> books = getBookService().findAll(booksToRemove);
        orderBook.removeFromBooks(books);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customersToRemove
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.removeFromCustomers(OrderBook orderBook, Iterable<Long> customersToRemove) {
        List<Customer> customers = getCustomerService().findAll(customersToRemove);
        orderBook.removeFromCustomers(customers);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param books
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.setBooks(OrderBook orderBook, Iterable<Long> books) {
        List<Book> items = getBookService().findAll(books);
        Set<Book> currents = orderBook.getBooks();
        Set<Book> toRemove = new HashSet<Book>();
        for (Iterator<Book> iterator = currents.iterator(); iterator.hasNext();) {
            Book nextBook = iterator.next();
            if (items.contains(nextBook)) {
                items.remove(nextBook);
            } else {
                toRemove.add(nextBook);
            }
        }
        orderBook.removeFromBooks(toRemove);
        orderBook.addToBooks(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        orderBook.setVersion(orderBook.getVersion() + 1);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customers
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.setCustomers(OrderBook orderBook, Iterable<Long> customers) {
        List<Customer> items = getCustomerService().findAll(customers);
        Set<Customer> currents = orderBook.getCustomers();
        Set<Customer> toRemove = new HashSet<Customer>();
        for (Iterator<Customer> iterator = currents.iterator(); iterator.hasNext();) {
            Customer nextCustomer = iterator.next();
            if (items.contains(nextCustomer)) {
                items.remove(nextCustomer);
            } else {
                toRemove.add(nextCustomer);
            }
        }
        orderBook.removeFromCustomers(toRemove);
        orderBook.addToCustomers(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        orderBook.setVersion(orderBook.getVersion() + 1);
        return getOrderBookRepository().save(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     */
    @Transactional
    public void OrderBookServiceImpl.delete(OrderBook orderBook) {
        // Clear bidirectional many-to-many parent relationship with Book
        for (Book item : orderBook.getBooks()) {
            item.getOrderBooks().remove(orderBook);
        }
        
        // Clear bidirectional one-to-many parent relationship with Customer
        for (Customer item : orderBook.getCustomers()) {
            item.setOrderBook(null);
        }
        
        getOrderBookRepository().delete(orderBook);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<OrderBook> OrderBookServiceImpl.save(Iterable<OrderBook> entities) {
        return getOrderBookRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void OrderBookServiceImpl.delete(Iterable<Long> ids) {
        List<OrderBook> toDelete = getOrderBookRepository().findAll(ids);
        getOrderBookRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return OrderBook
     */
    @Transactional
    public OrderBook OrderBookServiceImpl.save(OrderBook entity) {
        return getOrderBookRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return OrderBook
     */
    public OrderBook OrderBookServiceImpl.findOne(Long id) {
        return getOrderBookRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return OrderBook
     */
    public OrderBook OrderBookServiceImpl.findOneForUpdate(Long id) {
        return getOrderBookRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<OrderBook> OrderBookServiceImpl.findAll(Iterable<Long> ids) {
        return getOrderBookRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<OrderBook> OrderBookServiceImpl.findAll() {
        return getOrderBookRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long OrderBookServiceImpl.count() {
        return getOrderBookRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<OrderBook> OrderBookServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getOrderBookRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<OrderBook> OrderBookServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getOrderBookRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<OrderBook> OrderBookServiceImpl.getEntityType() {
        return OrderBook.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> OrderBookServiceImpl.getIdType() {
        return Long.class;
    }
    
}
