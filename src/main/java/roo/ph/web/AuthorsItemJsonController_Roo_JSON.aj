// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.web;

import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;
import roo.ph.domain.Author;
import roo.ph.service.api.AuthorService;
import roo.ph.web.AuthorsItemJsonController;

privileged aspect AuthorsItemJsonController_Roo_JSON {
    
    declare @type: AuthorsItemJsonController: @RestController;
    
    declare @type: AuthorsItemJsonController: @RequestMapping(value = "/authors/{author}", name = "AuthorsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private AuthorService AuthorsItemJsonController.authorService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param authorService
     */
    @Autowired
    public AuthorsItemJsonController.new(AuthorService authorService) {
        this.authorService = authorService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return AuthorService
     */
    public AuthorService AuthorsItemJsonController.getAuthorService() {
        return authorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param authorService
     */
    public void AuthorsItemJsonController.setAuthorService(AuthorService authorService) {
        this.authorService = authorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Author
     */
    @ModelAttribute
    public Author AuthorsItemJsonController.getAuthor(@PathVariable("author") Long id) {
        Author author = authorService.findOne(id);
        if (author == null) {
            throw new NotFoundException(String.format("Author with identifier '%s' not found",id));
        }
        return author;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> AuthorsItemJsonController.show(@ModelAttribute Author author) {
        return ResponseEntity.ok(author);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @return UriComponents
     */
    public static UriComponents AuthorsItemJsonController.showURI(Author author) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(AuthorsItemJsonController.class).show(author))
            .buildAndExpand(author.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedAuthor
     * @param author
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> AuthorsItemJsonController.update(@ModelAttribute Author storedAuthor, @Valid @RequestBody Author author, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        author.setId(storedAuthor.getId());
        getAuthorService().save(author);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> AuthorsItemJsonController.delete(@ModelAttribute Author author) {
        getAuthorService().delete(author);
        return ResponseEntity.ok().build();
    }
    
}
