// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import roo.ph.domain.Author;
import roo.ph.domain.Contract;
import roo.ph.service.api.AuthorService;
import roo.ph.service.api.ContractService;
import roo.ph.web.AuthorsCollectionThymeleafController;
import roo.ph.web.AuthorsCollectionThymeleafLinkFactory;
import roo.ph.web.AuthorsItemContractsThymeleafController;

privileged aspect AuthorsItemContractsThymeleafController_Roo_Thymeleaf {
    
    declare @type: AuthorsItemContractsThymeleafController: @Controller;
    
    declare @type: AuthorsItemContractsThymeleafController: @RequestMapping(value = "/authors/{author}/contracts", name = "AuthorsItemContractsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private AuthorService AuthorsItemContractsThymeleafController.authorService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContractService AuthorsItemContractsThymeleafController.contractService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource AuthorsItemContractsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<AuthorsCollectionThymeleafController> AuthorsItemContractsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService AuthorsItemContractsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param authorService
     * @param contractService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public AuthorsItemContractsThymeleafController.new(AuthorService authorService, ContractService contractService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setAuthorService(authorService);
        setContractService(contractService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(AuthorsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return AuthorService
     */
    public AuthorService AuthorsItemContractsThymeleafController.getAuthorService() {
        return authorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param authorService
     */
    public void AuthorsItemContractsThymeleafController.setAuthorService(AuthorService authorService) {
        this.authorService = authorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContractService
     */
    public ContractService AuthorsItemContractsThymeleafController.getContractService() {
        return contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contractService
     */
    public void AuthorsItemContractsThymeleafController.setContractService(ContractService contractService) {
        this.contractService = contractService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource AuthorsItemContractsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void AuthorsItemContractsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<AuthorsCollectionThymeleafController> AuthorsItemContractsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void AuthorsItemContractsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<AuthorsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService AuthorsItemContractsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void AuthorsItemContractsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Author
     */
    @ModelAttribute
    public Author AuthorsItemContractsThymeleafController.getAuthor(@PathVariable("author") Long id, Locale locale, HttpMethod method) {
        Author author = null;
        if (HttpMethod.PUT.equals(method)) {
            author = authorService.findOneForUpdate(id);
        } else {
            author = authorService.findOne(id);
        }
        
        if (author == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Author", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return author;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void AuthorsItemContractsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void AuthorsItemContractsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Contract>> AuthorsItemContractsThymeleafController.datatables(@ModelAttribute Author author, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Contract> contracts = getContractService().findByAuthor(author, search, pageable);
        long totalContractsCount = getContractService().countByAuthor(author);
        ConvertedDatatablesData<Contract> data =  new ConvertedDatatablesData<Contract>(contracts, totalContractsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Contract>> AuthorsItemContractsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Contract> contracts = getContractService().findAllByIdsIn(ids, search, pageable);
        long totalContractsCount = contracts.getTotalElements();
        ConvertedDatatablesData<Contract> data =  new ConvertedDatatablesData<Contract>(contracts, totalContractsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView AuthorsItemContractsThymeleafController.createForm(@ModelAttribute Author author, Model model) {
        populateForm(model);
        model.addAttribute("contract", new Contract());
        return new ModelAndView("authors/contracts/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contractsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromContracts", value = "/{contractsToRemove}")
    @ResponseBody
    public ResponseEntity<?> AuthorsItemContractsThymeleafController.removeFromContracts(@ModelAttribute Author author, @PathVariable("contractsToRemove") Long contractsToRemove) {
        getAuthorService().removeFromContracts(author,Collections.singleton(contractsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contractsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromContractsBatch", value = "/batch/{contractsToRemove}")
    @ResponseBody
    public ResponseEntity<?> AuthorsItemContractsThymeleafController.removeFromContractsBatch(@ModelAttribute Author author, @PathVariable("contractsToRemove") Collection<Long> contractsToRemove) {
        getAuthorService().removeFromContracts(author, contractsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param contracts
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView AuthorsItemContractsThymeleafController.create(@ModelAttribute Author author, @RequestParam(value = "contractsIds", required = false) List<Long> contracts, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (contracts != null) {
            for (Iterator<Long> iterator = contracts.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, author.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (contracts != null) {
                author.setContracts(new HashSet<Contract>(getContractService().findAll(contracts)));
            }else{
                author.setContracts(new HashSet<Contract>());
            }
            // Reset the version to prevent update
             author.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("author", author);
            model.addAttribute("concurrency", true);
            return new ModelAndView("authors/contracts/create");
        }else if(!Objects.equals(version, author.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("author", author);
            model.addAttribute("concurrency", false);
            return new ModelAndView("authors/contracts/create");
        }
        getAuthorService().setContracts(author,contracts);
        return new ModelAndView("redirect:" + getCollectionLink().to(AuthorsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
