// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import roo.ph.domain.Customer;
import roo.ph.domain.OrderBook;
import roo.ph.service.api.CustomerService;
import roo.ph.service.api.OrderBookService;
import roo.ph.web.OrderBooksCollectionThymeleafController;
import roo.ph.web.OrderBooksCollectionThymeleafLinkFactory;
import roo.ph.web.OrderBooksItemCustomersThymeleafController;

privileged aspect OrderBooksItemCustomersThymeleafController_Roo_Thymeleaf {
    
    declare @type: OrderBooksItemCustomersThymeleafController: @Controller;
    
    declare @type: OrderBooksItemCustomersThymeleafController: @RequestMapping(value = "/orderbooks/{orderBook}/customers", name = "OrderBooksItemCustomersThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private OrderBookService OrderBooksItemCustomersThymeleafController.orderBookService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerService OrderBooksItemCustomersThymeleafController.customerService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource OrderBooksItemCustomersThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> OrderBooksItemCustomersThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService OrderBooksItemCustomersThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param orderBookService
     * @param customerService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public OrderBooksItemCustomersThymeleafController.new(OrderBookService orderBookService, CustomerService customerService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setOrderBookService(orderBookService);
        setCustomerService(customerService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(OrderBooksCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return OrderBookService
     */
    public OrderBookService OrderBooksItemCustomersThymeleafController.getOrderBookService() {
        return orderBookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBookService
     */
    public void OrderBooksItemCustomersThymeleafController.setOrderBookService(OrderBookService orderBookService) {
        this.orderBookService = orderBookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerService
     */
    public CustomerService OrderBooksItemCustomersThymeleafController.getCustomerService() {
        return customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerService
     */
    public void OrderBooksItemCustomersThymeleafController.setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource OrderBooksItemCustomersThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void OrderBooksItemCustomersThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> OrderBooksItemCustomersThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void OrderBooksItemCustomersThymeleafController.setCollectionLink(MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService OrderBooksItemCustomersThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void OrderBooksItemCustomersThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return OrderBook
     */
    @ModelAttribute
    public OrderBook OrderBooksItemCustomersThymeleafController.getOrderBook(@PathVariable("orderBook") Long id, Locale locale, HttpMethod method) {
        OrderBook orderBook = null;
        if (HttpMethod.PUT.equals(method)) {
            orderBook = orderBookService.findOneForUpdate(id);
        } else {
            orderBook = orderBookService.findOne(id);
        }
        
        if (orderBook == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"OrderBook", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return orderBook;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void OrderBooksItemCustomersThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void OrderBooksItemCustomersThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Customer>> OrderBooksItemCustomersThymeleafController.datatables(@ModelAttribute OrderBook orderBook, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Customer> customers = getCustomerService().findByOrderBook(orderBook, search, pageable);
        long totalCustomersCount = getCustomerService().countByOrderBook(orderBook);
        ConvertedDatatablesData<Customer> data =  new ConvertedDatatablesData<Customer>(customers, totalCustomersCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Customer>> OrderBooksItemCustomersThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Customer> customers = getCustomerService().findAllByIdsIn(ids, search, pageable);
        long totalCustomersCount = customers.getTotalElements();
        ConvertedDatatablesData<Customer> data =  new ConvertedDatatablesData<Customer>(customers, totalCustomersCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView OrderBooksItemCustomersThymeleafController.createForm(@ModelAttribute OrderBook orderBook, Model model) {
        populateForm(model);
        model.addAttribute("customer", new Customer());
        return new ModelAndView("orderbooks/customers/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customersToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromCustomers", value = "/{customersToRemove}")
    @ResponseBody
    public ResponseEntity<?> OrderBooksItemCustomersThymeleafController.removeFromCustomers(@ModelAttribute OrderBook orderBook, @PathVariable("customersToRemove") Long customersToRemove) {
        getOrderBookService().removeFromCustomers(orderBook,Collections.singleton(customersToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customersToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromCustomersBatch", value = "/batch/{customersToRemove}")
    @ResponseBody
    public ResponseEntity<?> OrderBooksItemCustomersThymeleafController.removeFromCustomersBatch(@ModelAttribute OrderBook orderBook, @PathVariable("customersToRemove") Collection<Long> customersToRemove) {
        getOrderBookService().removeFromCustomers(orderBook, customersToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param customers
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView OrderBooksItemCustomersThymeleafController.create(@ModelAttribute OrderBook orderBook, @RequestParam(value = "customersIds", required = false) List<Long> customers, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (customers != null) {
            for (Iterator<Long> iterator = customers.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, orderBook.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (customers != null) {
                orderBook.setCustomers(new HashSet<Customer>(getCustomerService().findAll(customers)));
            }else{
                orderBook.setCustomers(new HashSet<Customer>());
            }
            // Reset the version to prevent update
             orderBook.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("orderBook", orderBook);
            model.addAttribute("concurrency", true);
            return new ModelAndView("orderbooks/customers/create");
        }else if(!Objects.equals(version, orderBook.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("orderBook", orderBook);
            model.addAttribute("concurrency", false);
            return new ModelAndView("orderbooks/customers/create");
        }
        getOrderBookService().setCustomers(orderBook,customers);
        return new ModelAndView("redirect:" + getCollectionLink().to(OrderBooksCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
