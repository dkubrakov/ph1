// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import roo.ph.domain.Book;
import roo.ph.domain.OrderBook;
import roo.ph.service.api.BookService;
import roo.ph.service.api.OrderBookService;
import roo.ph.web.OrderBooksCollectionThymeleafController;
import roo.ph.web.OrderBooksCollectionThymeleafLinkFactory;
import roo.ph.web.OrderBooksItemBooksThymeleafController;

privileged aspect OrderBooksItemBooksThymeleafController_Roo_Thymeleaf {
    
    declare @type: OrderBooksItemBooksThymeleafController: @Controller;
    
    declare @type: OrderBooksItemBooksThymeleafController: @RequestMapping(value = "/orderbooks/{orderBook}/books", name = "OrderBooksItemBooksThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private OrderBookService OrderBooksItemBooksThymeleafController.orderBookService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private BookService OrderBooksItemBooksThymeleafController.bookService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource OrderBooksItemBooksThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> OrderBooksItemBooksThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService OrderBooksItemBooksThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param orderBookService
     * @param bookService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public OrderBooksItemBooksThymeleafController.new(OrderBookService orderBookService, BookService bookService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setOrderBookService(orderBookService);
        setBookService(bookService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(OrderBooksCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return OrderBookService
     */
    public OrderBookService OrderBooksItemBooksThymeleafController.getOrderBookService() {
        return orderBookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBookService
     */
    public void OrderBooksItemBooksThymeleafController.setOrderBookService(OrderBookService orderBookService) {
        this.orderBookService = orderBookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return BookService
     */
    public BookService OrderBooksItemBooksThymeleafController.getBookService() {
        return bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param bookService
     */
    public void OrderBooksItemBooksThymeleafController.setBookService(BookService bookService) {
        this.bookService = bookService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource OrderBooksItemBooksThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void OrderBooksItemBooksThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> OrderBooksItemBooksThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void OrderBooksItemBooksThymeleafController.setCollectionLink(MethodLinkBuilderFactory<OrderBooksCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService OrderBooksItemBooksThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void OrderBooksItemBooksThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return OrderBook
     */
    @ModelAttribute
    public OrderBook OrderBooksItemBooksThymeleafController.getOrderBook(@PathVariable("orderBook") Long id, Locale locale, HttpMethod method) {
        OrderBook orderBook = null;
        if (HttpMethod.PUT.equals(method)) {
            orderBook = orderBookService.findOneForUpdate(id);
        } else {
            orderBook = orderBookService.findOne(id);
        }
        
        if (orderBook == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"OrderBook", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return orderBook;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void OrderBooksItemBooksThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("publication_date_format", "dd/MM/yyyy");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void OrderBooksItemBooksThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBooks
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Book>> OrderBooksItemBooksThymeleafController.datatables(@ModelAttribute OrderBook orderBooks, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Book> books = getBookService().findByOrderBooksContains(orderBooks, search, pageable);
        long totalBooksCount = getBookService().countByOrderBooksContains(orderBooks);
        ConvertedDatatablesData<Book> data =  new ConvertedDatatablesData<Book>(books, totalBooksCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Book>> OrderBooksItemBooksThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Book> books = getBookService().findAllByIdsIn(ids, search, pageable);
        long totalBooksCount = books.getTotalElements();
        ConvertedDatatablesData<Book> data =  new ConvertedDatatablesData<Book>(books, totalBooksCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView OrderBooksItemBooksThymeleafController.createForm(@ModelAttribute OrderBook orderBook, Model model) {
        populateForm(model);
        model.addAttribute("book", new Book());
        return new ModelAndView("orderbooks/books/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param booksToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromBooks", value = "/{booksToRemove}")
    @ResponseBody
    public ResponseEntity<?> OrderBooksItemBooksThymeleafController.removeFromBooks(@ModelAttribute OrderBook orderBook, @PathVariable("booksToRemove") Long booksToRemove) {
        getOrderBookService().removeFromBooks(orderBook,Collections.singleton(booksToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param booksToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromBooksBatch", value = "/batch/{booksToRemove}")
    @ResponseBody
    public ResponseEntity<?> OrderBooksItemBooksThymeleafController.removeFromBooksBatch(@ModelAttribute OrderBook orderBook, @PathVariable("booksToRemove") Collection<Long> booksToRemove) {
        getOrderBookService().removeFromBooks(orderBook, booksToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBook
     * @param books
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView OrderBooksItemBooksThymeleafController.create(@ModelAttribute OrderBook orderBook, @RequestParam(value = "booksIds", required = false) List<Long> books, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (books != null) {
            for (Iterator<Long> iterator = books.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, orderBook.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (books != null) {
                orderBook.setBooks(new HashSet<Book>(getBookService().findAll(books)));
            }else{
                orderBook.setBooks(new HashSet<Book>());
            }
            // Reset the version to prevent update
             orderBook.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("orderBook", orderBook);
            model.addAttribute("concurrency", true);
            return new ModelAndView("orderbooks/books/create");
        }else if(!Objects.equals(version, orderBook.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("orderBook", orderBook);
            model.addAttribute("concurrency", false);
            return new ModelAndView("orderbooks/books/create");
        }
        getOrderBookService().setBooks(orderBook,books);
        return new ModelAndView("redirect:" + getCollectionLink().to(OrderBooksCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
