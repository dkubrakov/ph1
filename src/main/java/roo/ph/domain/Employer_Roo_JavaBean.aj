// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.domain;

import java.util.Date;
import java.util.Objects;
import java.util.Set;
import roo.ph.domain.Contract;
import roo.ph.domain.Employer;
import roo.ph.domain.reference.Appointment;

privileged aspect Employer_Roo_JavaBean {
    
    /**
     * Gets id value
     * 
     * @return Long
     */
    public Long Employer.getId() {
        return this.id;
    }
    
    /**
     * Sets id value
     * 
     * @param id
     * @return Employer
     */
    public Employer Employer.setId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Gets version value
     * 
     * @return Integer
     */
    public Integer Employer.getVersion() {
        return this.version;
    }
    
    /**
     * Sets version value
     * 
     * @param version
     * @return Employer
     */
    public Employer Employer.setVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    /**
     * Gets name value
     * 
     * @return String
     */
    public String Employer.getName() {
        return this.name;
    }
    
    /**
     * Sets name value
     * 
     * @param name
     * @return Employer
     */
    public Employer Employer.setName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Gets address value
     * 
     * @return String
     */
    public String Employer.getAddress() {
        return this.address;
    }
    
    /**
     * Sets address value
     * 
     * @param address
     * @return Employer
     */
    public Employer Employer.setAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * Gets phone value
     * 
     * @return String
     */
    public String Employer.getPhone() {
        return this.phone;
    }
    
    /**
     * Sets phone value
     * 
     * @param phone
     * @return Employer
     */
    public Employer Employer.setPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Gets birthdate value
     * 
     * @return Date
     */
    public Date Employer.getBirthdate() {
        return this.birthdate;
    }
    
    /**
     * Sets birthdate value
     * 
     * @param birthdate
     * @return Employer
     */
    public Employer Employer.setBirthdate(Date birthdate) {
        this.birthdate = birthdate;
        return this;
    }
    
    /**
     * Gets employeeStatus value
     * 
     * @return Appointment
     */
    public Appointment Employer.getEmployeeStatus() {
        return this.employeeStatus;
    }
    
    /**
     * Sets employeeStatus value
     * 
     * @param employeeStatus
     * @return Employer
     */
    public Employer Employer.setEmployeeStatus(Appointment employeeStatus) {
        this.employeeStatus = employeeStatus;
        return this;
    }
    
    /**
     * Gets contracts value
     * 
     * @return Set
     */
    public Set<Contract> Employer.getContracts() {
        return this.contracts;
    }
    
    /**
     * Sets contracts value
     * 
     * @param contracts
     * @return Employer
     */
    public Employer Employer.setContracts(Set<Contract> contracts) {
        this.contracts = contracts;
        return this;
    }
    
    /**
     * This `equals` implementation is specific for JPA entities and uses 
     * the entity identifier for it, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @param obj
     * @return Boolean
     */
    public boolean Employer.equals(Object obj) {
        if (this == obj) {
            return true;
        }
        // instanceof is false if the instance is null
        if (!(obj instanceof Employer)) {
            return false;
        }
        return getId() != null && Objects.equals(getId(), ((Employer) obj).getId());
    }
    
    /**
     * This `hashCode` implementation is specific for JPA entities and uses a fixed `int` value to be able 
     * to identify the entity in collections after a new id is assigned to the entity, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @return Integer
     */
    public int Employer.hashCode() {
        return 31;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String Employer.toString() {
        return "Employer {" + 
                "id='" + id + '\'' + 
                ", version='" + version + '\'' + 
                ", name='" + name + '\'' + 
                ", address='" + address + '\'' + 
                ", phone='" + phone + '\'' + 
                ", birthdate='" + birthdate == null ? null : java.text.DateFormat.getDateTimeInstance().format(birthdate) + '\'' + "}" + super.toString();
    }
    
}
