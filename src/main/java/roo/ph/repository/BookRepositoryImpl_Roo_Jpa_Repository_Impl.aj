// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import roo.ph.domain.Author;
import roo.ph.domain.Book;
import roo.ph.domain.OrderBook;
import roo.ph.domain.QBook;
import roo.ph.repository.BookRepositoryImpl;

privileged aspect BookRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: BookRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.PRICE = "price";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.EXPENSES = "expenses";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.CIRCUL = "circul";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.PUBLICATION = "publication";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String BookRepositoryImpl.AUTHOR = "author";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Path<?>[] paths = new Path<?>[] {book.name,book.price,book.expenses,book.circul,book.publication,book.author};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, book.name)
			.map(PRICE, book.price)
			.map(EXPENSES, book.expenses)
			.map(CIRCUL, book.circul)
			.map(PUBLICATION, book.publication)
			.map(AUTHOR, book.author);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Path<?>[] paths = new Path<?>[] {book.name,book.price,book.expenses,book.circul,book.publication,book.author};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(book.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, book.name)
			.map(PRICE, book.price)
			.map(EXPENSES, book.expenses)
			.map(CIRCUL, book.circul)
			.map(PUBLICATION, book.publication)
			.map(AUTHOR, book.author);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findByAuthor(Author author, GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Assert.notNull(author, "author is required");
        
        query.where(book.author.eq(author));
        Path<?>[] paths = new Path<?>[] {book.name,book.price,book.expenses,book.circul,book.publication,book.author};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, book.name)
			.map(PRICE, book.price)
			.map(EXPENSES, book.expenses)
			.map(CIRCUL, book.circul)
			.map(PUBLICATION, book.publication)
			.map(AUTHOR, book.author);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderBooks
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Book> BookRepositoryImpl.findByOrderBooksContains(OrderBook orderBooks, GlobalSearch globalSearch, Pageable pageable) {
        
        QBook book = QBook.book;
        
        JPQLQuery<Book> query = from(book);
        
        Assert.notNull(orderBooks, "orderBooks is required");
        
        query.where(book.orderBooks.contains(orderBooks));
        Path<?>[] paths = new Path<?>[] {book.name,book.price,book.expenses,book.circul,book.publication,book.author};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, book.name)
			.map(PRICE, book.price)
			.map(EXPENSES, book.expenses)
			.map(CIRCUL, book.circul)
			.map(PUBLICATION, book.publication)
			.map(AUTHOR, book.author);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, book);
    }
    
}
