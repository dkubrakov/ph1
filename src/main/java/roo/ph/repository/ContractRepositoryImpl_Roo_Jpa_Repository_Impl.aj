// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.ph.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import roo.ph.domain.Author;
import roo.ph.domain.Contract;
import roo.ph.domain.Employer;
import roo.ph.domain.QContract;
import roo.ph.repository.ContractRepositoryImpl;

privileged aspect ContractRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ContractRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContractRepositoryImpl.SALARY = "salary";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContractRepositoryImpl.AUTHOR = "author";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContractRepositoryImpl.EMPLOYER = "employer";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contract> ContractRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QContract contract = QContract.contract;
        
        JPQLQuery<Contract> query = from(contract);
        
        Path<?>[] paths = new Path<?>[] {contract.salary,contract.author,contract.employer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SALARY, contract.salary)
			.map(AUTHOR, contract.author)
			.map(EMPLOYER, contract.employer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contract);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contract> ContractRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QContract contract = QContract.contract;
        
        JPQLQuery<Contract> query = from(contract);
        
        Path<?>[] paths = new Path<?>[] {contract.salary,contract.author,contract.employer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(contract.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SALARY, contract.salary)
			.map(AUTHOR, contract.author)
			.map(EMPLOYER, contract.employer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contract);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param author
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contract> ContractRepositoryImpl.findByAuthor(Author author, GlobalSearch globalSearch, Pageable pageable) {
        
        QContract contract = QContract.contract;
        
        JPQLQuery<Contract> query = from(contract);
        
        Assert.notNull(author, "author is required");
        
        query.where(contract.author.eq(author));
        Path<?>[] paths = new Path<?>[] {contract.salary,contract.author,contract.employer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SALARY, contract.salary)
			.map(AUTHOR, contract.author)
			.map(EMPLOYER, contract.employer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contract);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param employer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contract> ContractRepositoryImpl.findByEmployer(Employer employer, GlobalSearch globalSearch, Pageable pageable) {
        
        QContract contract = QContract.contract;
        
        JPQLQuery<Contract> query = from(contract);
        
        Assert.notNull(employer, "employer is required");
        
        query.where(contract.employer.eq(employer));
        Path<?>[] paths = new Path<?>[] {contract.salary,contract.author,contract.employer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SALARY, contract.salary)
			.map(AUTHOR, contract.author)
			.map(EMPLOYER, contract.employer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contract);
    }
    
}
